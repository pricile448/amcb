const http = require('http');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function addMyNotifications() {
  console.log('üîî Cr√©ation de vos notifications personnalis√©es\n');
  
  const userId = 'YWu55QljgEM4J350kB7aKGf03TS2'; // Votre UID
  
  try {
    // Demander les d√©tails de la notification
    const title = await question('üìù Titre de la notification: ');
    const message = await question('üí¨ Message de la notification: ');
    
    console.log('\nüé® Types disponibles:');
    console.log('1. info (‚ÑπÔ∏è) - Information g√©n√©rale');
    console.log('2. success (‚úÖ) - Succ√®s/Confirmation');
    console.log('3. warning (‚ö†Ô∏è) - Avertissement');
    console.log('4. error (‚ùå) - Erreur');
    console.log('5. feature (üÜï) - Nouvelle fonctionnalit√©');
    
    const typeChoice = await question('\nChoisissez le type (1-5): ');
    const types = ['info', 'success', 'warning', 'error', 'feature'];
    const type = types[parseInt(typeChoice) - 1] || 'info';
    
    console.log('\nüö® Priorit√©s disponibles:');
    console.log('1. low (Basse)');
    console.log('2. medium (Moyenne)');
    console.log('3. high (Haute)');
    
    const priorityChoice = await question('\nChoisissez la priorit√© (1-3): ');
    const priorities = ['low', 'medium', 'high'];
    const priority = priorities[parseInt(priorityChoice) - 1] || 'medium';
    
    console.log('\nüìÇ Cat√©gories disponibles:');
    console.log('1. general (G√©n√©ral)');
    console.log('2. security (S√©curit√©)');
    console.log('3. transaction (Transaction)');
    console.log('4. feature (Fonctionnalit√©)');
    console.log('5. support (Support)');
    
    const categoryChoice = await question('\nChoisissez la cat√©gorie (1-5): ');
    const categories = ['general', 'security', 'transaction', 'feature', 'support'];
    const category = categories[parseInt(categoryChoice) - 1] || 'general';
    
    const readChoice = await question('\nMarquer comme lue ? (o/n): ');
    const read = readChoice.toLowerCase() === 'o';
    
    // Cr√©er la notification
    const notification = {
      userId: userId,
      title: title,
      message: message,
      type: type,
      date: new Date().toISOString(),
      read: read,
      priority: priority,
      category: category
    };
    
    console.log('\nüì§ Envoi de la notification...');
    
    // Envoyer √† l'API
    const postData = JSON.stringify(notification);
    
    const options = {
      hostname: 'localhost',
      port: 5173,
      path: '/api/notifications',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(postData)
      }
    };
    
    const req = http.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        if (res.statusCode === 201) {
          console.log('‚úÖ Notification cr√©√©e avec succ√®s !');
          console.log('\nüìã D√©tails de la notification:');
          console.log(`Titre: ${title}`);
          console.log(`Type: ${type}`);
          console.log(`Priorit√©: ${priority}`);
          console.log(`Cat√©gorie: ${category}`);
          console.log(`Lu: ${read ? 'Oui' : 'Non'}`);
          console.log('\nüéØ Ouvrez maintenant votre application pour voir la notification !');
        } else {
          console.log('‚ùå Erreur lors de la cr√©ation:', res.statusCode);
          console.log('R√©ponse:', data);
        }
        rl.close();
      });
    });
    
    req.on('error', (error) => {
      console.error('‚ùå Erreur de connexion:', error.message);
      console.log('üí° Assurez-vous que le serveur est d√©marr√© (npm run dev)');
      rl.close();
    });
    
    req.write(postData);
    req.end();
    
  } catch (error) {
    console.error('‚ùå Erreur:', error);
    rl.close();
  }
}

// Fonction pour ajouter plusieurs notifications rapidement
async function addQuickNotifications() {
  console.log('üöÄ Ajout rapide de notifications de test...\n');
  
  const userId = 'YWu55QljgEM4J350kB7aKGf03TS2';
  
  const quickNotifications = [
    {
      title: 'Test de notification personnalis√©e',
      message: 'Ceci est un test de notification que vous avez cr√©√©e vous-m√™me !',
      type: 'info',
      priority: 'medium',
      category: 'general',
      read: false
    },
    {
      title: 'Nouvelle fonctionnalit√© disponible',
      message: 'Vous pouvez maintenant cr√©er vos propres notifications directement depuis ce script !',
      type: 'feature',
      priority: 'high',
      category: 'feature',
      read: false
    },
    {
      title: 'Syst√®me de notifications op√©rationnel',
      message: 'Le syst√®me de notifications est maintenant enti√®rement fonctionnel avec scroll et modal !',
      type: 'success',
      priority: 'medium',
      category: 'general',
      read: false
    }
  ];
  
  let createdCount = 0;
  
  for (const notif of quickNotifications) {
    const notification = {
      userId: userId,
      ...notif,
      date: new Date().toISOString()
    };
    
    const postData = JSON.stringify(notification);
    
    const options = {
      hostname: 'localhost',
      port: 5173,
      path: '/api/notifications',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(postData)
      }
    };
    
    const req = http.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        createdCount++;
        if (res.statusCode === 201) {
          console.log(`‚úÖ Notification ${createdCount} cr√©√©e: ${notification.title}`);
        } else {
          console.log(`‚ùå Erreur notification ${createdCount}: ${res.statusCode}`);
        }
        
        if (createdCount === quickNotifications.length) {
          console.log('\nüéâ Toutes les notifications ont √©t√© cr√©√©es !');
          console.log('üéØ Ouvrez votre application pour voir les nouvelles notifications !');
          process.exit(0);
        }
      });
    });
    
    req.on('error', (error) => {
      console.error('‚ùå Erreur de connexion:', error.message);
      process.exit(1);
    });
    
    req.write(postData);
    req.end();
  }
}

// Menu principal
async function main() {
  console.log('üîî Gestionnaire de Notifications Personnalis√©es\n');
  console.log('1. Cr√©er une notification personnalis√©e (interactif)');
  console.log('2. Ajouter rapidement des notifications de test');
  console.log('3. Quitter');
  
  const choice = await question('\nChoisissez une option (1-3): ');
  
  switch (choice) {
    case '1':
      await addMyNotifications();
      break;
    case '2':
      await addQuickNotifications();
      break;
    case '3':
      console.log('üëã Au revoir !');
      rl.close();
      break;
    default:
      console.log('‚ùå Option invalide');
      rl.close();
  }
}

main(); 