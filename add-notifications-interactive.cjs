const admin = require('firebase-admin');
const serviceAccount = require('./firebase-config.cjs');
const readline = require('readline');

// Initialiser Firebase Admin
if (!admin.apps.length) {
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount.serviceAccount),
    databaseURL: "https://amcbunq-default-rtdb.europe-west1.firebasedatabase.app"
  });
}

const db = admin.firestore();

// Interface readline pour l'interaction
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Fonction pour poser une question
function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer.trim());
    });
  });
}

// Fonction pour afficher un menu
function displayMenu() {
  console.log('\nüîî MENU DES NOTIFICATIONS');
  console.log('=' .repeat(40));
  console.log('1. Ajouter une notification personnalis√©e');
  console.log('2. Ajouter des notifications de test rapides');
  console.log('3. Voir mes notifications actuelles');
  console.log('4. Supprimer toutes mes notifications');
  console.log('5. Quitter');
  console.log('=' .repeat(40));
}

// Fonction pour ajouter une notification personnalis√©e
async function addCustomNotification(userId) {
  console.log('\nüìù AJOUT D\'UNE NOTIFICATION PERSONNALIS√âE');
  console.log('=' .repeat(50));

  try {
    const title = await askQuestion('üìã Titre de la notification: ');
    const message = await askQuestion('üìù Message de la notification: ');
    
    console.log('\nüéØ Type de notification:');
    console.log('1. info (bleu)');
    console.log('2. success (vert)');
    console.log('3. warning (orange)');
    console.log('4. error (rouge)');
    console.log('5. feature (violet)');
    const typeChoice = await askQuestion('Choisissez le type (1-5): ');
    
    const types = ['info', 'success', 'warning', 'error', 'feature'];
    const type = types[parseInt(typeChoice) - 1] || 'info';

    console.log('\nüìä Priorit√©:');
    console.log('1. Basse (üü¢)');
    console.log('2. Moyenne (üü°)');
    console.log('3. Haute (üî¥)');
    const priorityChoice = await askQuestion('Choisissez la priorit√© (1-3): ');
    
    const priorities = ['low', 'medium', 'high'];
    const priority = priorities[parseInt(priorityChoice) - 1] || 'medium';

    console.log('\nüìÇ Cat√©gorie:');
    console.log('1. G√©n√©ral');
    console.log('2. S√©curit√©');
    console.log('3. Transaction');
    console.log('4. Chat');
    console.log('5. Fonctionnalit√©');
    const categoryChoice = await askQuestion('Choisissez la cat√©gorie (1-5): ');
    
    const categories = ['general', 'security', 'transaction', 'chat', 'feature'];
    const category = categories[parseInt(categoryChoice) - 1] || 'general';

    const readChoice = await askQuestion('Marquer comme lue ? (o/n): ');
    const read = readChoice.toLowerCase() === 'o';

    // Cr√©er la notification
    const notification = {
      id: `notif_${Date.now()}_${Math.random().toString(36).substring(2)}`,
      title: title,
      message: message,
      type: type,
      date: new Date().toISOString(),
      read: read,
      priority: priority,
      category: category,
      createdAt: new Date().toISOString()
    };

    // Ajouter √† Firestore
    const userRef = db.collection('users').doc(userId);
    const userDoc = await userRef.get();
    
    if (!userDoc.exists) {
      console.log('‚ùå Utilisateur non trouv√©');
      return;
    }

    const userData = userDoc.data();
    const currentNotifications = userData.notifications || [];
    const updatedNotifications = [...currentNotifications, notification];

    await userRef.update({
      notifications: updatedNotifications,
      updatedAt: admin.firestore.FieldValue.serverTimestamp()
    });

    console.log('\n‚úÖ Notification ajout√©e avec succ√®s !');
    console.log(`üìã Titre: ${notification.title}`);
    console.log(`üéØ Type: ${notification.type}`);
    console.log(`üìä Priorit√©: ${notification.priority}`);
    console.log(`üìÇ Cat√©gorie: ${notification.category}`);

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'ajout de la notification:', error);
  }
}

// Fonction pour ajouter des notifications de test rapides
async function addQuickTestNotifications(userId) {
  console.log('\nüöÄ AJOUT DE NOTIFICATIONS DE TEST RAPIDES');
  console.log('=' .repeat(50));

  try {
    const testNotifications = [
      {
        title: 'Bienvenue sur AmCbunq',
        message: 'Votre compte a √©t√© cr√©√© avec succ√®s. Commencez par v√©rifier votre identit√© pour acc√©der √† toutes les fonctionnalit√©s.',
        type: 'info',
        priority: 'high',
        category: 'general',
        read: false
      },
      {
        title: 'V√©rification d\'identit√© requise',
        message: 'Pour acc√©der √† toutes les fonctionnalit√©s, veuillez compl√©ter votre v√©rification d\'identit√©.',
        type: 'warning',
        priority: 'high',
        category: 'security',
        read: false
      },
      {
        title: 'Nouvelle fonctionnalit√© disponible',
        message: 'D√©couvrez notre nouveau syst√®me de notifications en temps r√©el !',
        type: 'feature',
        priority: 'medium',
        category: 'feature',
        read: false
      },
      {
        title: 'Transaction effectu√©e',
        message: 'Votre virement de 150‚Ç¨ vers Jean Dupont a √©t√© effectu√© avec succ√®s.',
        type: 'success',
        priority: 'medium',
        category: 'transaction',
        read: true
      },
      {
        title: 'Maintenance pr√©vue',
        message: 'Une maintenance est pr√©vue ce soir de 23h √† 2h du matin. Certains services pourront √™tre temporairement indisponibles.',
        type: 'warning',
        priority: 'medium',
        category: 'general',
        read: false
      }
    ];

    const userRef = db.collection('users').doc(userId);
    const userDoc = await userRef.get();
    
    if (!userDoc.exists) {
      console.log('‚ùå Utilisateur non trouv√©');
      return;
    }

    const userData = userDoc.data();
    const currentNotifications = userData.notifications || [];
    
    // Ajouter les notifications de test avec des IDs uniques
    const newNotifications = testNotifications.map((notif, index) => ({
      ...notif,
      id: `notif_${Date.now()}_${index}_${Math.random().toString(36).substring(2)}`,
      date: new Date(Date.now() - index * 1000 * 60 * 30).toISOString(), // Espacer de 30 min
      createdAt: new Date(Date.now() - index * 1000 * 60 * 30).toISOString()
    }));

    const updatedNotifications = [...currentNotifications, ...newNotifications];

    await userRef.update({
      notifications: updatedNotifications,
      updatedAt: admin.firestore.FieldValue.serverTimestamp()
    });

    console.log(`‚úÖ ${newNotifications.length} notifications de test ajout√©es avec succ√®s !`);
    newNotifications.forEach((notif, index) => {
      console.log(`${index + 1}. ${notif.title} (${notif.type})`);
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'ajout des notifications de test:', error);
  }
}

// Fonction pour voir les notifications actuelles
async function viewCurrentNotifications(userId) {
  console.log('\nüìã MES NOTIFICATIONS ACTUELLES');
  console.log('=' .repeat(50));

  try {
    const userRef = db.collection('users').doc(userId);
    const userDoc = await userRef.get();
    
    if (!userDoc.exists) {
      console.log('‚ùå Utilisateur non trouv√©');
      return;
    }

    const userData = userDoc.data();
    const notifications = userData.notifications || [];

    if (notifications.length === 0) {
      console.log('üì≠ Aucune notification trouv√©e');
      return;
    }

    // Trier par date d√©croissante
    notifications.sort((a, b) => new Date(b.date) - new Date(a.date));

    notifications.forEach((notif, index) => {
      const date = new Date(notif.date).toLocaleString('fr-FR');
      const readStatus = notif.read ? '‚úÖ' : '‚ùå';
      const priorityIcon = {
        'low': 'üü¢',
        'medium': 'üü°', 
        'high': 'üî¥'
      }[notif.priority] || '‚ö™';

      console.log(`${index + 1}. ${priorityIcon} ${notif.title}`);
      console.log(`   üìÖ ${date} | ${readStatus} Lu | ${notif.type.toUpperCase()} | ${notif.category}`);
      console.log(`   üìù ${notif.message}`);
      console.log('');
    });

    // Statistiques
    const unreadCount = notifications.filter(n => !n.read).length;
    console.log(`üìä Total: ${notifications.length} | Non lues: ${unreadCount}`);

  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des notifications:', error);
  }
}

// Fonction pour supprimer toutes les notifications
async function clearAllNotifications(userId) {
  console.log('\nüóëÔ∏è SUPPRESSION DE TOUTES LES NOTIFICATIONS');
  console.log('=' .repeat(50));

  const confirm = await askQuestion('‚ö†Ô∏è √ätes-vous s√ªr de vouloir supprimer TOUTES vos notifications ? (oui/non): ');
  
  if (confirm.toLowerCase() !== 'oui') {
    console.log('‚ùå Suppression annul√©e');
    return;
  }

  try {
    const userRef = db.collection('users').doc(userId);
    const userDoc = await userRef.get();
    
    if (!userDoc.exists) {
      console.log('‚ùå Utilisateur non trouv√©');
      return;
    }

    await userRef.update({
      notifications: [],
      updatedAt: admin.firestore.FieldValue.serverTimestamp()
    });

    console.log('‚úÖ Toutes les notifications ont √©t√© supprim√©es');

  } catch (error) {
    console.error('‚ùå Erreur lors de la suppression:', error);
  }
}

// Fonction principale
async function main() {
  const userId = 'YWu55QljgEM4J350kB7aKGf03TS2'; // Votre ID utilisateur
  
  console.log('üîî SCRIPT INTERACTIF DE GESTION DES NOTIFICATIONS');
  console.log('=' .repeat(60));
  console.log(`üë§ Utilisateur: ${userId}`);

  while (true) {
    displayMenu();
    const choice = await askQuestion('\nChoisissez une option (1-5): ');

    switch (choice) {
      case '1':
        await addCustomNotification(userId);
        break;
      case '2':
        await addQuickTestNotifications(userId);
        break;
      case '3':
        await viewCurrentNotifications(userId);
        break;
      case '4':
        await clearAllNotifications(userId);
        break;
      case '5':
        console.log('\nüëã Au revoir !');
        rl.close();
        return;
      default:
        console.log('‚ùå Option invalide, veuillez choisir 1-5');
    }

    if (choice !== '5') {
      await askQuestion('\nAppuyez sur Entr√©e pour continuer...');
    }
  }
}

// Ex√©cuter le script
main().catch(console.error); 