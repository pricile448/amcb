const admin = require('firebase-admin');
const serviceAccount = require('./firebase-config.cjs');

// Initialiser Firebase Admin
if (!admin.apps.length) {
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount.serviceAccount),
    databaseURL: "https://amcbunq-default-rtdb.europe-west1.firebasedatabase.app"
  });
}

const db = admin.firestore();

async function addRealNotifications() {
  const userId = 'YWu55QljgEM4J350kB7aKGf03TS2';
  
  console.log('üè¶ AJOUT DE NOTIFICATIONS R√âELLES');
  console.log('=' .repeat(40));
  console.log(`üë§ Utilisateur: ${userId}\n`);

  try {
    // 1. R√©cup√©rer les notifications actuelles
    console.log('üìã 1. R√©cup√©ration des notifications actuelles...');
    const userRef = db.collection('users').doc(userId);
    const userDoc = await userRef.get();
    
    if (!userDoc.exists) {
      console.log('‚ùå Utilisateur non trouv√©');
      return;
    }

    const userData = userDoc.data();
    const currentNotifications = userData.notifications || [];
    
    console.log(`üìä Notifications actuelles: ${currentNotifications.length}`);
    
    // 2. Filtrer pour garder seulement les vraies notifications
    const realNotifications = currentNotifications.filter(notif => {
      const isTest = notif.title.includes('Test') || 
                    notif.title.includes('test') || 
                    notif.id.includes('test') || 
                    notif.id.includes('frontend_test') ||
                    notif.message.includes('test') ||
                    notif.message.includes('Test');
      return !isTest;
    });
    
    console.log(`‚úÖ Notifications r√©elles conserv√©es: ${realNotifications.length}`);
    
    // 3. Ajouter des notifications r√©elles de banque
    console.log('\nüìù 2. Ajout de notifications r√©elles...');
    
    const realBankingNotifications = [
      {
        id: `notif_${Date.now()}_1`,
        userId: userId,
        title: 'Transaction effectu√©e',
        message: 'Votre virement de 150‚Ç¨ vers Jean Dupont a √©t√© effectu√© avec succ√®s.',
        type: 'success',
        date: admin.firestore.Timestamp.fromDate(new Date(Date.now() - 1000 * 60 * 30)), // 30 min ago
        read: false,
        priority: 'medium',
        category: 'transaction'
      },
      {
        id: `notif_${Date.now()}_2`,
        userId: userId,
        title: 'Maintenance pr√©vue',
        message: 'Une maintenance est pr√©vue ce soir de 23h √† 2h du matin. Certains services pourront √™tre temporairement indisponibles.',
        type: 'warning',
        date: admin.firestore.Timestamp.fromDate(new Date(Date.now() - 1000 * 60 * 60 * 2)), // 2h ago
        read: false,
        priority: 'high',
        category: 'maintenance'
      },
      {
        id: `notif_${Date.now()}_3`,
        userId: userId,
        title: 'Nouvelle fonctionnalit√©',
        message: 'Vous pouvez maintenant t√©l√©charger vos relev√©s bancaires en PDF directement depuis votre espace client.',
        type: 'feature',
        date: admin.firestore.Timestamp.fromDate(new Date(Date.now() - 1000 * 60 * 60 * 24)), // 1 day ago
        read: true,
        priority: 'low',
        category: 'feature'
      },
      {
        id: `notif_${Date.now()}_4`,
        userId: userId,
        title: 'S√©curit√© renforc√©e',
        message: 'Votre compte est maintenant prot√©g√© par l\'authentification √† deux facteurs. Merci de configurer votre application d\'authentification.',
        type: 'info',
        date: admin.firestore.Timestamp.fromDate(new Date(Date.now() - 1000 * 60 * 60 * 24 * 2)), // 2 days ago
        read: true,
        priority: 'high',
        category: 'security'
      },
      {
        id: `notif_${Date.now()}_5`,
        userId: userId,
        title: 'Carte d√©bit√©e',
        message: 'Paiement de 45,80‚Ç¨ effectu√© chez Carrefour. Votre solde actuel est de 1.234,56‚Ç¨.',
        type: 'info',
        date: admin.firestore.Timestamp.fromDate(new Date(Date.now() - 1000 * 60 * 60 * 6)), // 6h ago
        read: false,
        priority: 'medium',
        category: 'transaction'
      }
    ];
    
    // 4. Combiner les notifications existantes avec les nouvelles
    const allNotifications = [...realNotifications, ...realBankingNotifications];
    
    // 5. Mettre √† jour Firestore
    console.log('\nüíæ 3. Mise √† jour de Firestore...');
    await userRef.update({
      notifications: allNotifications,
      updatedAt: admin.firestore.FieldValue.serverTimestamp()
    });
    
    console.log(`‚úÖ ${realBankingNotifications.length} nouvelles notifications ajout√©es`);
    console.log(`üìä Total: ${allNotifications.length} notifications`);
    
    // 6. Afficher le r√©sum√©
    console.log('\nüìã 4. R√©sum√© des notifications:');
    allNotifications.forEach((notif, index) => {
      console.log(`   ${index + 1}. ${notif.title}`);
      console.log(`      Type: ${notif.type} | Priorit√©: ${notif.priority} | Lu: ${notif.read ? 'Oui' : 'Non'}`);
      console.log('');
    });
    
    console.log('\nüéâ Notifications r√©elles ajout√©es avec succ√®s !');
    console.log('üí° Les utilisateurs peuvent maintenant voir des notifications de banque r√©alistes.');

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'ajout:', error);
    console.error('Stack trace:', error.stack);
  }
}

// Ex√©cuter l'ajout
addRealNotifications().catch(console.error); 