// firestore.rules
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // 👮‍♂️ Collection admins : Administrateurs de la plateforme
    match /admins/{adminId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null && request.auth.uid == adminId;
      allow update: if request.auth != null && request.auth.uid == adminId;
      allow delete: if request.auth != null 
        && exists(/databases/$(database)/documents/admins/$(request.auth.uid))
        && get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == 'super_admin';
      allow read: if request.auth != null 
        && exists(/databases/$(database)/documents/admins/$(request.auth.uid))
        && get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role in ['admin', 'super_admin'];
    }
    
    // 👤 Collection users : RÈGLES SIMPLIFIÉES POUR KYC
    match /users/{userId} {
      // ✅ CRÉATION : utilisateur peut créer son propre document
      allow create: if request.auth != null && request.auth.uid == userId;
      
      // ✅ LECTURE : utilisateur peut lire ses propres données
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // ✅ MISE À JOUR : utilisateur peut mettre à jour ses propres données
      // 🔧 SIMPLIFICATION : Permettre toutes les mises à jour pour l'utilisateur
      allow update: if request.auth != null && request.auth.uid == userId;
      
      // 👮‍♂️ Admins peuvent tout faire
      allow read, write: if request.auth != null 
        && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // 🧾 Collection kycSubmissions : RÈGLES SIMPLIFIÉES
    match /kycSubmissions/{submissionId} {
      // ✅ CRÉATION : utilisateur peut créer ses propres soumissions
      allow create: if request.auth != null 
        && request.resource.data.userId == request.auth.uid;
      
      // ✅ LECTURE : utilisateur peut lire ses propres soumissions
      allow read: if request.auth != null 
        && resource.data.userId == request.auth.uid;
      
      // ✅ MISE À JOUR : utilisateur peut mettre à jour ses propres soumissions
      allow update: if request.auth != null 
        && resource.data.userId == request.auth.uid;
      
      // ✅ SUPPRESSION : utilisateur peut supprimer ses propres soumissions
      allow delete: if request.auth != null 
        && resource.data.userId == request.auth.uid;
      
      // 👮‍♂️ Admins peuvent tout faire
      allow read, write: if request.auth != null 
        && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // 🏦 Collection accounts
    match /accounts/{accountId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create, update: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read, write: if request.auth != null 
        && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // 💰 Collection transactions
    match /transactions/{transactionId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read, write: if request.auth != null 
        && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // 📄 Collection documents
    match /documents/{documentId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create, update, delete: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read, write: if request.auth != null 
        && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // 🔄 Collection transfers
    match /transfers/{transferId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read, write: if request.auth != null 
        && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // 👥 Collection beneficiaries
    match /beneficiaries/{beneficiaryId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create, update, delete: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read, write: if request.auth != null 
        && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // 💬 Collection chats
    match /chats/{chatId} {
      allow read: if request.auth != null 
        && (resource.data.userId == request.auth.uid || request.auth.uid in resource.data.participants);
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read, write: if request.auth != null 
        && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      
      match /messages/{messageId} {
        allow read: if request.auth != null 
          && (get(/databases/$(database)/documents/chats/$(chatId)).data.userId == request.auth.uid
              || request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants);
        allow create: if request.auth != null 
          && (get(/databases/$(database)/documents/chats/$(chatId)).data.userId == request.auth.uid
              || request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants)
          && request.resource.data.senderId == request.auth.uid;
        allow read, write: if request.auth != null 
          && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }
    }
    
    // 📧 Collection emailVerificationCodes
    match /emailVerificationCodes/{userId} {
      allow create, read, update, delete: if request.auth != null && request.auth.uid == userId;
      allow read, write: if request.auth != null 
        && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // 🏦 Collection ribRequests : Demandes de RIB
    match /ribRequests/{requestId} {
      // ✅ CRÉATION : utilisateur peut créer ses propres demandes
      allow create: if request.auth != null 
        && request.resource.data.userId == request.auth.uid;
      
      // ✅ LECTURE : utilisateur peut lire ses propres demandes
      allow read: if request.auth != null 
        && resource.data.userId == request.auth.uid;
      
      // ✅ MISE À JOUR : utilisateur peut mettre à jour ses propres demandes
      allow update: if request.auth != null 
        && resource.data.userId == request.auth.uid;
      
      // 👮‍♂️ Admins peuvent tout faire
      allow read, write: if request.auth != null 
        && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // 💳 Collection cardRequests : Demandes de cartes
    match /cardRequests/{requestId} {
      // ✅ CRÉATION : utilisateur peut créer ses propres demandes
      allow create: if request.auth != null 
        && request.resource.data.userId == request.auth.uid;
      
      // ✅ LECTURE : utilisateur peut lire ses propres demandes
      allow read: if request.auth != null 
        && resource.data.userId == request.auth.uid;
      
      // ✅ MISE À JOUR : utilisateur peut mettre à jour ses propres demandes
      allow update: if request.auth != null 
        && resource.data.userId == request.auth.uid;
      
      // 👮‍♂️ Admins peuvent tout faire
      allow read, write: if request.auth != null 
        && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // ✅ NOTE: Les sous-documents RIB et cartes sont stockés dans users/{userId}
    // Les règles users existantes couvrent déjà l'accès aux données
    
    // 🚫 Tout le reste est refusé par défaut
    match /{document=**} {
      allow read, write: if false;
    }
  }
}