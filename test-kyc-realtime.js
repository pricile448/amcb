#!/usr/bin/env node

/**
 * Script de test pour la synchronisation KYC en temps r√©el
 * 
 * Ce script simule les changements de statut KYC pour tester
 * la synchronisation en temps r√©el dans l'application.
 */

const { initializeApp } = require('firebase/app');
const { getFirestore, doc, updateDoc, serverTimestamp } = require('firebase/firestore');

// Configuration Firebase (√† adapter selon votre projet)
const firebaseConfig = {
  // Remplacez par votre configuration Firebase
  apiKey: process.env.FIREBASE_API_KEY,
  authDomain: process.env.FIREBASE_AUTH_DOMAIN,
  projectId: process.env.FIREBASE_PROJECT_ID,
  storageBucket: process.env.FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.FIREBASE_APP_ID
};

// Initialiser Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

/**
 * Simuler un changement de statut KYC
 * @param {string} userId - ID de l'utilisateur
 * @param {string} newStatus - Nouveau statut ('unverified', 'pending', 'approved', 'rejected')
 * @param {string} rejectionReason - Raison du rejet (optionnel)
 */
async function simulateKycStatusChange(userId, newStatus, rejectionReason = null) {
  try {
    console.log(`üîÑ Simulation changement statut KYC pour l'utilisateur ${userId}:`);
    console.log(`   Ancien statut ‚Üí Nouveau statut: ${newStatus}`);
    
    const userRef = doc(db, 'users', userId);
    
    // Pr√©parer les donn√©es de mise √† jour
    const updateData = {
      kycStatus: newStatus,
      updatedAt: serverTimestamp(),
    };
    
    // Ajouter des d√©tails selon le statut
    const kycStatusDetails = {
      status: newStatus,
      lastUpdated: new Date(),
    };
    
    switch (newStatus) {
      case 'pending':
        kycStatusDetails.submittedAt = new Date();
        break;
      case 'approved':
        kycStatusDetails.approvedAt = new Date();
        break;
      case 'rejected':
        kycStatusDetails.rejectedAt = new Date();
        if (rejectionReason) {
          kycStatusDetails.rejectionReason = rejectionReason;
        }
        break;
    }
    
    updateData.kycStatusDetails = kycStatusDetails;
    
    // Mettre √† jour dans Firestore
    await updateDoc(userRef, updateData);
    
    console.log(`‚úÖ Statut KYC mis √† jour avec succ√®s vers: ${newStatus}`);
    
    if (rejectionReason) {
      console.log(`   Raison du rejet: ${rejectionReason}`);
    }
    
    return true;
    
  } catch (error) {
    console.error(`‚ùå Erreur lors de la mise √† jour du statut KYC:`, error);
    return false;
  }
}

/**
 * Test de s√©quence compl√®te de changements de statut
 * @param {string} userId - ID de l'utilisateur
 */
async function testKycStatusSequence(userId) {
  console.log(`üß™ D√©marrage test s√©quence KYC pour l'utilisateur: ${userId}`);
  console.log('=' .repeat(50));
  
  const delays = [2000, 3000, 2000, 3000]; // D√©lais entre chaque changement
  
  const statuses = [
    { status: 'unverified', reason: null },
    { status: 'pending', reason: null },
    { status: 'approved', reason: null },
    { status: 'rejected', reason: 'Document expir√©' }
  ];
  
  for (let i = 0; i < statuses.length; i++) {
    const { status, reason } = statuses[i];
    
    console.log(`\nüìù √âtape ${i + 1}/${statuses.length}: Changement vers ${status}`);
    
    const success = await simulateKycStatusChange(userId, status, reason);
    
    if (success) {
      console.log(`‚è≥ Attente de ${delays[i] / 1000}s avant le prochain changement...`);
      
      if (i < statuses.length - 1) {
        await new Promise(resolve => setTimeout(resolve, delays[i]));
      }
    } else {
      console.log(`‚ùå √âchec de l'√©tape ${i + 1}, arr√™t du test`);
      break;
    }
  }
  
  console.log('\nüéØ Test de s√©quence KYC termin√©!');
  console.log('   V√©rifiez dans votre application que les changements sont visibles en temps r√©el.');
}

/**
 * Test de changement rapide de statut (pour tester la r√©activit√©)
 * @param {string} userId - ID de l'utilisateur
 */
async function testRapidStatusChanges(userId) {
  console.log(`‚ö° Test de changements rapides de statut pour l'utilisateur: ${userId}`);
  console.log('=' .repeat(50));
  
  const rapidStatuses = ['pending', 'approved', 'pending', 'rejected', 'pending'];
  
  for (let i = 0; i < rapidStatuses.length; i++) {
    const status = rapidStatuses[i];
    
    console.log(`\nüîÑ Changement rapide ${i + 1}/${rapidStatuses.length}: ${status}`);
    
    const success = await simulateKycStatusChange(userId, status);
    
    if (success) {
      console.log(`‚è≥ Attente de 1s...`);
      await new Promise(resolve => setTimeout(resolve, 1000));
    } else {
      console.log(`‚ùå √âchec du changement rapide ${i + 1}`);
      break;
    }
  }
  
  console.log('\n‚ö° Test de changements rapides termin√©!');
}

// Fonction principale
async function main() {
  const userId = process.argv[2];
  
  if (!userId) {
    console.error('‚ùå Usage: node test-kyc-realtime.js <userId>');
    console.error('   Exemple: node test-kyc-realtime.js user123');
    process.exit(1);
  }
  
  console.log('üöÄ Script de test KYC en temps r√©el');
  console.log(`üë§ Utilisateur cible: ${userId}`);
  console.log('');
  
  try {
    // Test 1: S√©quence normale
    await testKycStatusSequence(userId);
    
    console.log('\n' + '=' .repeat(50));
    
    // Test 2: Changements rapides
    await testRapidStatusChanges(userId);
    
    console.log('\nüéâ Tous les tests sont termin√©s!');
    console.log('   V√©rifiez dans votre application que la synchronisation en temps r√©el fonctionne.');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'ex√©cution des tests:', error);
    process.exit(1);
  }
}

// Ex√©cuter le script
if (require.main === module) {
  main();
}

module.exports = {
  simulateKycStatusChange,
  testKycStatusSequence,
  testRapidStatusChanges
};
