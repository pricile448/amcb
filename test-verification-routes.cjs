const { initializeApp } = require('firebase/app');
const { getAuth, createUserWithEmailAndPassword, sendEmailVerification } = require('firebase/auth');
require('dotenv').config();

// Configuration Firebase
const firebaseConfig = {
  apiKey: process.env.VITE_FIREBASE_API_KEY,
  authDomain: process.env.VITE_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.VITE_FIREBASE_PROJECT_ID,
  storageBucket: process.env.VITE_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.VITE_FIREBASE_APP_ID
};

// Initialiser Firebase
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);

async function testVerificationRoutes() {
  try {
    console.log('üß™ Test des routes de v√©rification d\'email...\n');
    
    // 1. V√©rifier la configuration
    console.log('1Ô∏è‚É£ Configuration Firebase:');
    console.log('   - Auth Domain:', firebaseConfig.authDomain);
    console.log('   - Project ID:', firebaseConfig.projectId);
    console.log('   - API Key:', firebaseConfig.apiKey ? '‚úÖ Configur√©' : '‚ùå Manquant');
    
    // 2. Tester la cr√©ation d'un utilisateur temporaire
    console.log('\n2Ô∏è‚É£ Test de cr√©ation d\'utilisateur temporaire...');
    const testEmail = `test-${Date.now()}@example.com`;
    const testPassword = 'TestPassword123!';
    
    console.log('   - Email de test:', testEmail);
    console.log('   - Mot de passe:', testPassword);
    
    const userCredential = await createUserWithEmailAndPassword(auth, testEmail, testPassword);
    const user = userCredential.user;
    
    console.log('‚úÖ Utilisateur cr√©√© avec succ√®s!');
    console.log('   - UID:', user.uid);
    console.log('   - Email:', user.email);
    
    // 3. Tester l'envoi d'email de v√©rification
    console.log('\n3Ô∏è‚É£ Test d\'envoi d\'email de v√©rification...');
    
    // Simuler l'environnement local
    const originalOrigin = global.window?.location?.origin;
    global.window = {
      location: {
        origin: 'http://localhost:3000'
      }
    };
    
    const verificationUrl = `${global.window.location.origin}/auth/action`;
    console.log('   - URL de v√©rification g√©n√©r√©e:', verificationUrl);
    
    await sendEmailVerification(user, {
      url: verificationUrl,
      handleCodeInApp: false
    });
    
    console.log('‚úÖ Email de v√©rification envoy√©!');
    
    // 4. Nettoyer l'utilisateur de test
    console.log('\n4Ô∏è‚É£ Nettoyage de l\'utilisateur de test...');
    // Note: Firebase ne permet pas de supprimer un utilisateur directement
    // Il sera supprim√© automatiquement apr√®s un certain temps
    
    console.log('\nüéâ Test termin√© avec succ√®s!');
    console.log('\nüìã R√©sum√©:');
    console.log('   - ‚úÖ Firebase configur√© correctement');
    console.log('   - ‚úÖ Cr√©ation d\'utilisateur fonctionne');
    console.log('   - ‚úÖ Envoi d\'email fonctionne');
    console.log('   - ‚úÖ URL de v√©rification g√©n√©r√©e:', verificationUrl);
    
    console.log('\nüîç V√©rifications √† faire:');
    console.log('   1. V√©rifiez que votre serveur local fonctionne sur http://localhost:3000');
    console.log('   2. V√©rifiez que la route /auth/action est accessible');
    console.log('   3. V√©rifiez que l\'email est re√ßu dans votre bo√Æte de r√©ception');
    console.log('   4. Cliquez sur le lien dans l\'email pour tester la v√©rification');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
    
    if (error.code === 'auth/email-already-in-use') {
      console.log('\nüîç Email d√©j√† utilis√©, essayez avec un autre email de test');
    } else if (error.code === 'auth/weak-password') {
      console.log('\nüîç Mot de passe trop faible, utilisez un mot de passe plus fort');
    } else if (error.code === 'auth/invalid-email') {
      console.log('\nüîç Format d\'email invalide');
    } else if (error.code === 'auth/network-request-failed') {
      console.log('\nüîç Probl√®me de r√©seau, v√©rifiez votre connexion internet');
    }
  }
}

// Ex√©cuter le test
testVerificationRoutes().catch(console.error);
