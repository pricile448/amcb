rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // 👮‍♂️ Collection admins : Administrateurs de la plateforme
    match /admins/{adminId} {
      // ✅ Création : Seuls les utilisateurs authentifiés peuvent créer des admins
      allow create: if request.auth != null;
      
      // ✅ Lecture : L'admin peut lire ses propres données
      allow read: if request.auth != null 
        && request.auth.uid == adminId;
      
      // ✅ Mise à jour : L'admin peut mettre à jour ses propres données
      allow update: if request.auth != null 
        && request.auth.uid == adminId;
      
      // ✅ Suppression : Seuls les super admins peuvent supprimer des admins
      allow delete: if request.auth != null 
        && exists(/databases/$(database)/documents/admins/$(request.auth.uid))
        && get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == 'super_admin';
      
      // 🔍 Lecture par email : Pour la vérification des droits admin
      allow read: if request.auth != null 
        && exists(/databases/$(database)/documents/admins/$(request.auth.uid))
        && get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role in ['admin', 'super_admin'];
    }
    
    // 👤 Collection users : Règles KYC optimisées et CORRIGÉES
    match /users/{userId} {
      // ✅ CRÉATION : utilisateur peut créer son propre document
      allow create: if request.auth != null && request.auth.uid == userId;
      
      // ✅ LECTURE : utilisateur peut TOUJOURS lire ses propres données
      // 🔧 CORRECTION : Suppression des restrictions bloquantes
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // ✅ MISE À JOUR : Règles KYC strictes
      allow update: if request.auth != null 
        && request.auth.uid == userId
        && (
          // 🔐 TRANSITIONS KYC AUTORISÉES POUR L'UTILISATEUR
          (
            // 1. unverified → pending (soumission de documents)
            (resource.data.kycStatus == 'unverified' && request.resource.data.kycStatus == 'pending')
            ||
            // 2. pending → pending (mise à jour des documents)
            (resource.data.kycStatus == 'pending' && request.resource.data.kycStatus == 'pending')
          )
          ||
          // 📝 CHAMPS AUTORISÉS POUR TOUS LES STATUTS
          request.resource.data.diff(resource.data).affectedKeys().hasAny([
            'kycStatusDetails', 'verificationStatus', 
            'notifications', 'lastSignInTime', 'emailVerified', 
            'isEmailVerified', 'updatedAt', 'defaultAccountsCreated', 'defaultAccountsCreatedAt',
            'billingBic', 'billingHolder', 'billingIban', 'billingText', 'billingVisible',
            'emailVerificationCode', 'emailVerificationCodeExpires', 'emailVerifiedAt',
            'phoneVerified', 'isPhoneVerified', 'validatedAt', 'verifiedAt',
            'address', 'phone', 'birthDate', 'birthPlace', 'nationality', 'profession', 'salary'
          ])
          ||
          // 🔒 CHAMPS SENSIBLES SEULEMENT SI VERIFIED
          (
            resource.data.kycStatus == 'verified' &&
            request.resource.data.diff(resource.data).affectedKeys().hasAny([
              'accounts', 'beneficiaries', 'budgets', 'cardLimits', 'documents', 'transactions', 'virtualCards'
            ])
          )
        )
        &&
        // 🚫 PROTECTION CONTRE LES TRANSITIONS RÉTROGRADES
        (
          // Bloquer verified → unverified
          !(resource.data.kycStatus == 'verified' && request.resource.data.kycStatus == 'unverified')
          &&
          // Bloquer verified → pending
          !(resource.data.kycStatus == 'verified' && request.resource.data.kycStatus == 'pending')
          &&
          // Bloquer rejected → verified (seul admin peut)
          !(resource.data.kycStatus == 'rejected' && request.resource.data.kycStatus == 'verified')
        );
      
      // 👮‍♂️ Admins peuvent tout faire (y compris changer kycStatus)
      allow read, write: if request.auth != null 
        && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // 🆕 RÈGLE SPÉCIALE POUR LES DONNÉES DE FACTURATION
    // Permet aux admins de gérer les données de facturation de tous les utilisateurs
    match /users/{userId}/billing/{document=**} {
      allow read, write: if request.auth != null 
        && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // 🧾 Collection kycSubmissions
    match /kycSubmissions/{submissionId} {
      // ✅ Création : utilisateur peut créer ses propres soumissions
      allow create: if request.auth != null 
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.keys().hasAll(['id', 'userId', 'documentType', 'cloudinaryUrl', 'cloudinaryPublicId', 'fileName', 'fileSize', 'mimeType', 'submittedAt']);
      
      // ✅ Lecture : utilisateur peut lire ses propres soumissions
      allow read: if request.auth != null 
        && resource.data.userId == request.auth.uid;
      
      // ✅ Mise à jour : utilisateur peut mettre à jour ses propres soumissions
      allow update: if request.auth != null 
        && resource.data.userId == request.auth.uid;
      
      // ✅ Suppression : utilisateur peut supprimer ses propres soumissions
      allow delete: if request.auth != null 
        && resource.data.userId == request.auth.uid;
      
      // 👮‍♂️ Admins peuvent tout faire
      allow read, write: if request.auth != null 
        && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
         // 🏦 Collection accounts : Comptes bancaires - ACCÈS AUTORISÉ POUR TOUS LES STATUTS KYC
     match /accounts/{accountId} {
       allow read: if request.auth != null 
         && resource.data.userId == request.auth.uid;
       
       allow create, update: if request.auth != null 
         && request.resource.data.userId == request.auth.uid;
       
       allow read, write: if request.auth != null 
         && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
     }
    
         // 💰 Collection transactions : Transactions bancaires - ACCÈS AUTORISÉ POUR TOUS LES STATUTS KYC
     match /transactions/{transactionId} {
       // ✅ Lecture : utilisateur peut lire ses propres transactions
       allow read: if request.auth != null 
         && resource.data.userId == request.auth.uid;
       
       // ✅ Création : avec validation des champs obligatoires
       allow create: if request.auth != null 
         && request.resource.data.userId == request.auth.uid
         && request.resource.data.keys().hasAll([
           'date', 'description', 'account', 'category', 'reference', 'amount', 'userId'
         ])
         && request.resource.data.amount is number
         && request.resource.data.date is timestamp
         && request.resource.data.description is string
         && request.resource.data.account is string
         && request.resource.data.category is string
         && request.resource.data.reference is string;
       
       // ✅ Mise à jour : utilisateur peut modifier ses propres transactions
       allow update: if request.auth != null 
         && resource.data.userId == request.auth.uid
         && request.resource.data.userId == request.auth.uid;
       
       // ✅ Suppression : utilisateur peut supprimer ses propres transactions
       allow delete: if request.auth != null 
         && resource.data.userId == request.auth.uid;
       
       // 👮‍♂️ Admins peuvent tout faire
       allow read, write: if request.auth != null 
         && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
     }
    
    // 📄 Collection documents : Documents utilisateur
    match /documents/{documentId} {
      allow read: if request.auth != null 
        && resource.data.userId == request.auth.uid;
      
      allow create, update, delete: if request.auth != null 
        && request.resource.data.userId == request.auth.uid;
      
      allow read, write: if request.auth != null 
        && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // 🔄 Collection transfers : Virements
    match /transfers/{transferId} {
      allow read: if request.auth != null 
        && resource.data.userId == request.auth.uid;
      
      allow create: if request.auth != null 
        && request.resource.data.userId == request.auth.uid;
      
      allow read, write: if request.auth != null 
        && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // 👥 Collection beneficiaries : Bénéficiaires
    match /beneficiaries/{beneficiaryId} {
      allow read: if request.auth != null 
        && resource.data.userId == request.auth.uid;
      
      allow create: if request.auth != null 
        && request.resource.data.userId == request.auth.uid;
      
      allow update: if request.auth != null 
        && resource.data.userId == request.auth.uid
        && request.resource.data.userId == request.auth.uid;
      
      allow delete: if request.auth != null 
        && resource.data.userId == request.auth.uid;
      
      allow read, write: if request.auth != null 
        && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // 💬 Collection chats : Messages de support
    match /chats/{chatId} {
      allow read: if request.auth != null 
        && (
          resource.data.userId == request.auth.uid
          || request.auth.uid in resource.data.participants
        );
      
      allow create: if request.auth != null 
        && request.resource.data.userId == request.auth.uid;
      
      allow read, write: if request.auth != null 
        && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      
      // 💬 Sous-collection messages
      match /messages/{messageId} {
        allow read: if request.auth != null 
          && (
            get(/databases/$(database)/documents/chats/$(chatId)).data.userId == request.auth.uid
            || request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants
          );
        
        allow create: if request.auth != null 
          && (
            get(/databases/$(database)/documents/chats/$(chatId)).data.userId == request.auth.uid
            || request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants
          )
          && request.resource.data.senderId == request.auth.uid;
        
        allow read, write: if request.auth != null 
          && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }
    }
    
    // 📧 Collection emailVerificationCodes : Codes de vérification email
    match /emailVerificationCodes/{userId} {
      allow create, read, update, delete: if request.auth != null 
        && request.auth.uid == userId;
      
      allow read, write: if request.auth != null 
        && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // 🚫 Tout le reste est refusé par défaut
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
