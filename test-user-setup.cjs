#!/usr/bin/env node

/**
 * Script de test pour la cr√©ation automatique des sous-documents utilisateur
 * Ce script simule la cr√©ation d'un utilisateur et v√©rifie que tous les sous-documents sont cr√©√©s
 */

const { initializeApp } = require('firebase/app');
const { getFirestore, doc, setDoc, getDoc, updateDoc } = require('firebase/firestore');
const { getAuth, createUserWithEmailAndPassword } = require('firebase/auth');

// Configuration Firebase (√† adapter selon votre environnement)
const firebaseConfig = {
  // Remplacez par votre configuration Firebase
  apiKey: process.env.FIREBASE_API_KEY,
  authDomain: process.env.FIREBASE_AUTH_DOMAIN,
  projectId: process.env.FIREBASE_PROJECT_ID,
  storageBucket: process.env.FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.FIREBASE_APP_ID
};

// Initialiser Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const auth = getAuth(app);

// Donn√©es de test pour l'utilisateur
const testUserData = {
  firstName: 'Test',
  lastName: 'User',
  email: `test-${Date.now()}@example.com`,
  phone: '+33123456789',
  birthDate: '1990-01-01',
  birthPlace: 'Paris',
  nationality: 'Fran√ßaise',
  residenceCountry: 'France',
  address: '123 Rue de Test',
  city: 'Paris',
  postalCode: '75001',
  profession: 'D√©veloppeur',
  salary: '50000'
};

/**
 * Cr√©e automatiquement tous les sous-documents pour un nouvel utilisateur
 */
async function createCompleteUserSetup(userId, userData) {
  console.log('üîÑ Cr√©ation compl√®te du setup utilisateur pour:', userId);

  try {
    // 1. Cr√©er le document utilisateur principal
    await createMainUserDocument(userId, userData);
    
    // 2. Cr√©er les comptes bancaires par d√©faut
    await createDefaultAccounts(userId);
    
    // 3. Cr√©er la facturation par d√©faut (visible apr√®s KYC verified)
    await createDefaultBilling(userId, userData);
    
    // 4. Cr√©er les budgets par d√©faut
    await createDefaultBudgets(userId);
    
    // 5. Cr√©er les pr√©f√©rences de notifications
    await createNotificationPreferences(userId);
    
    // 6. Cr√©er les limites de carte par d√©faut
    await createDefaultCardLimits(userId);
    
    // 7. Cr√©er les documents par d√©faut
    await createDefaultDocuments(userId);
    
    // 8. Cr√©er les transactions initiales
    await createInitialTransactions(userId);
    
    // 9. Cr√©er les b√©n√©ficiaires par d√©faut
    await createDefaultBeneficiaries(userId, userData);
    
    // 10. Cr√©er les virements par d√©faut
    await createDefaultTransfers(userId);

    console.log('‚úÖ Setup utilisateur complet cr√©√© avec succ√®s');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation du setup utilisateur:', error);
    throw error;
  }
}

async function createMainUserDocument(userId, userData) {
  const userDoc = {
    firstName: userData.firstName,
    lastName: userData.lastName,
    email: userData.email,
    phone: userData.phone,
    dob: new Date(userData.birthDate),
    pob: userData.birthPlace,
    nationality: userData.nationality,
    residenceCountry: userData.residenceCountry,
    address: userData.address,
    city: userData.city,
    postalCode: userData.postalCode,
    profession: userData.profession,
    salary: parseInt(userData.salary),
    createdAt: new Date(),
    updatedAt: new Date(),
    emailVerified: false,
    emailVerificationCode: null,
    emailVerificationCodeExpires: null,
    emailVerifiedAt: null,
    isEmailVerified: false,
    isPhoneVerified: false,
    kycStatus: 'unverified',
    role: 'user',
    status: 'pending',
    inactivityTimeout: 5,
    hasPendingVirtualCardRequest: false,
    cardRequestedAt: null,
    cardStatus: 'not_requested',
    cardType: null,
    rejectedAt: null,
    validatedAt: null,
    verifiedAt: null
  };

  await setDoc(doc(db, 'users', userId), userDoc);
  console.log('‚úÖ Document utilisateur principal cr√©√©');
}

async function createDefaultAccounts(userId) {
  const defaultAccounts = [
    {
      id: 'checking-1',
      name: 'checking',
      accountType: 'checking',
      balance: 0,
      currency: 'EUR',
      status: 'active',
      accountNumber: `**** **** **** ${Math.floor(Math.random() * 9000) + 1000}`,
      createdAt: new Date()
    },
    {
      id: 'savings-1',
      name: 'savings',
      accountType: 'savings',
      balance: 0,
      currency: 'EUR',
      status: 'active',
      accountNumber: `**** **** **** ${Math.floor(Math.random() * 9000) + 5000}`,
      createdAt: new Date()
    },
    {
      id: 'credit-1',
      name: 'credit',
      accountType: 'credit',
      balance: 0,
      currency: 'EUR',
      status: 'active',
      accountNumber: `**** **** **** ${Math.floor(Math.random() * 9000) + 9000}`,
      createdAt: new Date()
    }
  ];

  await updateDoc(doc(db, 'users', userId), {
    accounts: defaultAccounts,
    defaultAccountsCreated: true,
    defaultAccountsCreatedAt: new Date()
  });
  console.log('‚úÖ Comptes bancaires par d√©faut cr√©√©s');
}

async function createDefaultBilling(userId, userData) {
  const billingData = {
    billingVisible: false, // Sera visible apr√®s KYC verified
    billingHolder: `${userData.firstName} ${userData.lastName}`,
    billingIban: `FR76 1652 8001 3100 0074 9591 ${Math.floor(Math.random() * 900) + 100}`,
    billingBic: 'SMOEFRP1',
    billingText: `Bonjour ${userData.firstName} ${userData.lastName}, votre compte est en cours de validation. Une fois votre KYC v√©rifi√©, vous aurez acc√®s √† toutes les fonctionnalit√©s.`
  };

  await updateDoc(doc(db, 'users', userId), {
    billing: billingData
  });
  console.log('‚úÖ Facturation par d√©faut cr√©√©e (masqu√©e jusqu\'√† KYC verified)');
}

async function createDefaultBudgets(userId) {
  const defaultBudgets = [
    {
      id: `budget_${userId}_food`,
      name: 'Alimentation',
      category: 'Alimentation',
      amount: 300,
      spent: 0,
      period: 'monthly',
      startDate: new Date(),
      endDate: new Date(new Date().setMonth(new Date().getMonth() + 1)),
      status: 'on-track',
      color: 'bg-green-500',
      icon: 'üõí'
    },
    {
      id: `budget_${userId}_transport`,
      name: 'Transport',
      category: 'Transport',
      amount: 150,
      spent: 0,
      period: 'monthly',
      startDate: new Date(),
      endDate: new Date(new Date().setMonth(new Date().getMonth() + 1)),
      status: 'on-track',
      color: 'bg-blue-500',
      icon: 'üöá'
    },
    {
      id: `budget_${userId}_entertainment`,
      name: 'Loisirs',
      category: 'Loisirs',
      amount: 200,
      spent: 0,
      period: 'monthly',
      startDate: new Date(),
      endDate: new Date(new Date().setMonth(new Date().getMonth() + 1)),
      status: 'on-track',
      color: 'bg-purple-500',
      icon: 'üé¨'
    }
  ];

  await updateDoc(doc(db, 'users', userId), {
    budgets: defaultBudgets,
    defaultBudgetsCreated: true,
    defaultBudgetsCreatedAt: new Date()
  });
  console.log('‚úÖ Budgets par d√©faut cr√©√©s');
}

async function createNotificationPreferences(userId) {
  const notificationPrefs = {
    email: true,
    security: true,
    promotions: false
  };

  await updateDoc(doc(db, 'users', userId), {
    notificationPrefs: notificationPrefs
  });
  console.log('‚úÖ Pr√©f√©rences de notifications cr√©√©es');
}

async function createDefaultCardLimits(userId) {
  const cardLimits = {
    monthly: 2000,
    withdrawal: 500
  };

  await updateDoc(doc(db, 'users', userId), {
    cardLimits: cardLimits
  });
  console.log('‚úÖ Limites de carte par d√©faut cr√©√©es');
}

async function createDefaultDocuments(userId) {
  const defaultDocuments = [
    {
      id: `doc_${userId}_id`,
      name: 'Pi√®ce d\'identit√©',
      type: 'identity',
      status: 'pending',
      uploadedAt: new Date(),
      verifiedAt: null
    },
    {
      id: `doc_${userId}_proof`,
      name: 'Justificatif de domicile',
      type: 'proof_of_address',
      status: 'pending',
      uploadedAt: new Date(),
      verifiedAt: null
    }
  ];

  await updateDoc(doc(db, 'users', userId), {
    documents: defaultDocuments
  });
  console.log('‚úÖ Documents par d√©faut cr√©√©s');
}

async function createInitialTransactions(userId) {
  const initialTransactions = [
    {
      id: `txn_${Date.now()}`,
      accountId: 'checking-1',
      amount: 0,
      currency: 'EUR',
      category: 'Initialisation',
      description: 'Cr√©ation du compte',
      date: new Date(),
      status: 'completed',
      type: 'initialization'
    }
  ];

  await updateDoc(doc(db, 'users', userId), {
    transactions: initialTransactions
  });
  console.log('‚úÖ Transactions initiales cr√©√©es');
}

async function createDefaultBeneficiaries(userId, userData) {
  const defaultBeneficiaries = [
    {
      id: `beneficiary_${Date.now()}`,
      name: `${userData.firstName} ${userData.lastName}`,
      nickname: 'Moi-m√™me',
      iban: `FR76 1652 8001 3100 0074 9591 ${Math.floor(Math.random() * 900) + 100}`,
      bic: 'SMOEFRP1'
    }
  ];

  await updateDoc(doc(db, 'users', userId), {
    beneficiaries: defaultBeneficiaries
  });
  console.log('‚úÖ B√©n√©ficiaires par d√©faut cr√©√©s');
}

async function createDefaultTransfers(userId) {
  const defaultTransfers = [];

  await updateDoc(doc(db, 'users', userId), {
    transfers: defaultTransfers
  });
  console.log('‚úÖ Virements par d√©faut cr√©√©s');
}

/**
 * V√©rifie que tous les sous-documents ont √©t√© cr√©√©s
 */
async function verifyUserSetup(userId) {
  console.log('\nüîç V√©rification du setup utilisateur...');
  
  try {
    const userDoc = await getDoc(doc(db, 'users', userId));
    
    if (!userDoc.exists()) {
      console.error('‚ùå Document utilisateur non trouv√©');
      return false;
    }
    
    const userData = userDoc.data();
    
    // V√©rifier les comptes
    if (!userData.accounts || userData.accounts.length === 0) {
      console.error('‚ùå Comptes non cr√©√©s');
      return false;
    }
    console.log('‚úÖ Comptes:', userData.accounts.length);
    
    // V√©rifier la facturation
    if (!userData.billing) {
      console.error('‚ùå Facturation non cr√©√©e');
      return false;
    }
    console.log('‚úÖ Facturation cr√©√©e (visible:', userData.billing.billingVisible, ')');
    
    // V√©rifier les budgets
    if (!userData.budgets || userData.budgets.length === 0) {
      console.error('‚ùå Budgets non cr√©√©s');
      return false;
    }
    console.log('‚úÖ Budgets:', userData.budgets.length);
    
    // V√©rifier les pr√©f√©rences de notifications
    if (!userData.notificationPrefs) {
      console.error('‚ùå Pr√©f√©rences de notifications non cr√©√©es');
      return false;
    }
    console.log('‚úÖ Pr√©f√©rences de notifications cr√©√©es');
    
    // V√©rifier les limites de carte
    if (!userData.cardLimits) {
      console.error('‚ùå Limites de carte non cr√©√©es');
      return false;
    }
    console.log('‚úÖ Limites de carte cr√©√©es');
    
    // V√©rifier les documents
    if (!userData.documents || userData.documents.length === 0) {
      console.error('‚ùå Documents non cr√©√©s');
      return false;
    }
    console.log('‚úÖ Documents:', userData.documents.length);
    
    // V√©rifier les transactions
    if (!userData.transactions || userData.transactions.length === 0) {
      console.error('‚ùå Transactions non cr√©√©es');
      return false;
    }
    console.log('‚úÖ Transactions:', userData.transactions.length);
    
    // V√©rifier les b√©n√©ficiaires
    if (!userData.beneficiaries || userData.beneficiaries.length === 0) {
      console.error('‚ùå B√©n√©ficiaires non cr√©√©s');
      return false;
    }
    console.log('‚úÖ B√©n√©ficiaires:', userData.beneficiaries.length);
    
    // V√©rifier les virements
    if (!userData.transfers) {
      console.error('‚ùå Virements non cr√©√©s');
      return false;
    }
    console.log('‚úÖ Virements cr√©√©s');
    
    console.log('\nüéâ Tous les sous-documents ont √©t√© cr√©√©s avec succ√®s !');
    return true;
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error);
    return false;
  }
}

/**
 * Fonction principale de test
 */
async function runTest() {
  console.log('üß™ D√©but du test de cr√©ation automatique des sous-documents utilisateur\n');
  
  try {
    // 1. Cr√©er un utilisateur de test
    console.log('1Ô∏è‚É£ Cr√©ation d\'un utilisateur de test...');
    const userCredential = await createUserWithEmailAndPassword(
      auth,
      testUserData.email,
      'TestPassword123!'
    );
    
    const userId = userCredential.user.uid;
    console.log('‚úÖ Utilisateur cr√©√© avec l\'ID:', userId);
    
    // 2. Cr√©er le setup complet
    console.log('\n2Ô∏è‚É£ Cr√©ation du setup complet...');
    await createCompleteUserSetup(userId, testUserData);
    
    // 3. V√©rifier que tout a √©t√© cr√©√©
    console.log('\n3Ô∏è‚É£ V√©rification du setup...');
    const success = await verifyUserSetup(userId);
    
    if (success) {
      console.log('\nüéØ Test r√©ussi ! Tous les sous-documents ont √©t√© cr√©√©s automatiquement.');
      console.log('üìù L\'utilisateur peut maintenant utiliser l\'application avec une structure compl√®te.');
      console.log('üîí Certains √©l√©ments (facturation, virements) ne seront visibles qu\'apr√®s v√©rification KYC.');
    } else {
      console.log('\n‚ùå Test √©chou√© ! Certains sous-documents n\'ont pas √©t√© cr√©√©s.');
    }
    
  } catch (error) {
    console.error('\nüí• Erreur lors du test:', error);
  } finally {
    console.log('\nüèÅ Test termin√©');
    process.exit(0);
  }
}

// Ex√©cuter le test si le script est appel√© directement
if (require.main === module) {
  runTest();
}

module.exports = {
  createCompleteUserSetup,
  verifyUserSetup
};
