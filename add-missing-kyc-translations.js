/**
 * Script pour ajouter les cl√©s de traduction manquantes dans les fichiers de localisation
 * Ce script identifie les textes cod√©s en dur dans KycPage.tsx et les ajoute √† tous les fichiers de localisation
 */

const fs = require('fs');
const path = require('path');

// Chemins des fichiers de localisation
const localesDir = path.join(__dirname, 'src', 'locales');
const frontendLocalesDir = path.join(__dirname, 'frontend', 'src', 'locales');

// Liste des langues support√©es
const languages = ['fr', 'en', 'es', 'pt', 'it', 'nl', 'de'];

// Textes cod√©s en dur identifi√©s dans KycPage.tsx
const hardcodedTexts = [
  { key: 'kyc.errors.userMissing', fr: 'Informations utilisateur manquantes', en: 'User information missing', es: 'Informaci√≥n de usuario faltante', pt: 'Informa√ß√µes do usu√°rio ausentes', it: 'Informazioni utente mancanti', nl: 'Gebruikersinformatie ontbreekt', de: 'Benutzerinformationen fehlen' },
  { key: 'kyc.errors.parsingUser', fr: 'Erreur parsing user:', en: 'Error parsing user:', es: 'Error al analizar usuario:', pt: 'Erro ao analisar usu√°rio:', it: 'Errore durante l\'analisi dell\'utente:', nl: 'Fout bij het verwerken van gebruiker:', de: 'Fehler beim Parsen des Benutzers:' },
  { key: 'kyc.errors.submissionError', fr: 'Erreur lors de la soumission:', en: 'Error during submission:', es: 'Error durante el env√≠o:', pt: 'Erro durante o envio:', it: 'Errore durante l\'invio:', nl: 'Fout tijdens het indienen:', de: 'Fehler bei der √úbermittlung:' },
  { key: 'kyc.success.title', fr: 'Succ√®s', en: 'Success', es: '√âxito', pt: 'Sucesso', it: 'Successo', nl: 'Succes', de: 'Erfolg' },
  { key: 'kyc.success.message', fr: 'Documents soumis avec succ√®s ! Vous recevrez un email de confirmation.', en: 'Documents submitted successfully! You will receive a confirmation email.', es: 'Documentos enviados con √©xito! Recibir√°s un correo electr√≥nico de confirmaci√≥n.', pt: 'Documentos enviados com sucesso! Voc√™ receber√° um e-mail de confirma√ß√£o.', it: 'Documenti inviati con successo! Riceverai un\'email di conferma.', nl: 'Documenten succesvol ingediend! U ontvangt een bevestigingsmail.', de: 'Dokumente erfolgreich eingereicht! Sie erhalten eine Best√§tigungs-E-Mail.' },
  { key: 'kyc.errors.title', fr: 'Erreur', en: 'Error', es: 'Error', pt: 'Erro', it: 'Errore', nl: 'Fout', de: 'Fehler' },
  { key: 'kyc.errors.submissionFailed', fr: 'Une erreur est survenue lors de la soumission', en: 'An error occurred during submission', es: 'Ocurri√≥ un error durante el env√≠o', pt: 'Ocorreu um erro durante o envio', it: 'Si √® verificato un errore durante l\'invio', nl: 'Er is een fout opgetreden tijdens het indienen', de: 'Bei der √úbermittlung ist ein Fehler aufgetreten' },
  { key: 'kyc.defaultUserName', fr: 'Utilisateur', en: 'User', es: 'Usuario', pt: 'Usu√°rio', it: 'Utente', nl: 'Gebruiker', de: 'Benutzer' }
];

// Fonction pour mettre √† jour un fichier de localisation
function updateLocaleFile(filePath, language) {
  console.log(`Mise √† jour du fichier ${filePath}...`);
  
  try {
    // Lire le fichier existant
    let localeData = {};
    if (fs.existsSync(filePath)) {
      const fileContent = fs.readFileSync(filePath, 'utf8');
      localeData = JSON.parse(fileContent);
    }
    
    // Ajouter les cl√©s manquantes
    let updated = false;
    
    hardcodedTexts.forEach(text => {
      const keyParts = text.key.split('.');
      let current = localeData;
      
      // Naviguer dans l'objet pour atteindre le bon niveau
      for (let i = 0; i < keyParts.length - 1; i++) {
        if (!current[keyParts[i]]) {
          current[keyParts[i]] = {};
          updated = true;
        }
        current = current[keyParts[i]];
      }
      
      // Ajouter la cl√© si elle n'existe pas
      const lastKey = keyParts[keyParts.length - 1];
      if (!current[lastKey]) {
        current[lastKey] = text[language] || text.en; // Utiliser la traduction sp√©cifique ou l'anglais par d√©faut
        updated = true;
      }
    });
    
    // Sauvegarder le fichier si des modifications ont √©t√© apport√©es
    if (updated) {
      fs.writeFileSync(filePath, JSON.stringify(localeData, null, 2), 'utf8');
      console.log(`‚úÖ Fichier ${filePath} mis √† jour avec succ√®s.`);
    } else {
      console.log(`‚ÑπÔ∏è Aucune modification n√©cessaire pour ${filePath}.`);
    }
    
    return true;
  } catch (error) {
    console.error(`‚ùå Erreur lors de la mise √† jour de ${filePath}:`, error);
    return false;
  }
}

// Fonction principale
function addMissingTranslations() {
  console.log('üîç Ajout des cl√©s de traduction manquantes...');
  
  // Traiter les fichiers de localisation dans src/locales
  if (fs.existsSync(localesDir)) {
    languages.forEach(lang => {
      const filePath = path.join(localesDir, `${lang}.json`);
      updateLocaleFile(filePath, lang);
    });
  } else {
    console.warn(`‚ö†Ô∏è R√©pertoire ${localesDir} introuvable.`);
  }
  
  // Traiter les fichiers de localisation dans frontend/src/locales
  if (fs.existsSync(frontendLocalesDir)) {
    languages.forEach(lang => {
      const filePath = path.join(frontendLocalesDir, `${lang}.json`);
      updateLocaleFile(filePath, lang);
    });
  } else {
    console.warn(`‚ö†Ô∏è R√©pertoire ${frontendLocalesDir} introuvable.`);
  }
  
  console.log('‚úÖ Processus termin√©.');
}

// Ex√©cuter le script
addMissingTranslations();